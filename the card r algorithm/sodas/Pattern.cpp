// Pattern.cpp: implementation of the Pattern class.
//
//////////////////////////////////////////////////////////////////////

#include "Pattern.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

Pattern::Pattern() {
	xL = new double[numeroVariaveis];

	xU = new double[numeroVariaveis];

	grauPertinencia = new double[numeroClasses];
}

Pattern::~Pattern() {
	delete xL;

	delete xU;

	delete grauPertinencia;
}

//////////////////////////////////////////////////////////////////////

double * Pattern::getXL() {
	return xL;
}

//////////////////////////////////////////////////////////////////////

double * Pattern::getXU() {
	return xU;
}

//////////////////////////////////////////////////////////////////////

void Pattern::setGrauPertinencia(int i, double valor) {
	grauPertinencia[i] = valor;
}

//////////////////////////////////////////////////////////////////////

double * Pattern::getGrauPertinencia() {
	return grauPertinencia;
}

//////////////////////////////////////////////////////////////////////

double Pattern::getGrauPertinencia(int i) {
	return grauPertinencia[i];
}

//////////////////////////////////////////////////////////////////////

double Pattern::getXL(int j) {
	return xL[j];
}

//////////////////////////////////////////////////////////////////////

double Pattern::getXU(int j) {
	return xU[j];
}

//////////////////////////////////////////////////////////////////////

void Pattern::setClasse(int c) {
	classe = c;
}

//////////////////////////////////////////////////////////////////////

int Pattern::getClasse() {
	return classe;
}

//////////////////////////////////////////////////////////////////////

void Pattern::setClassePriori(int cPriori) {
	classePriori = cPriori;
}

//////////////////////////////////////////////////////////////////////

int Pattern::getClassePriori() {
	return classePriori;
}

//////////////////////////////////////////////////////////////////////

char * Pattern::getNome() {
	return this->nome;
}

//////////////////////////////////////////////////////////////////////

void Pattern::setNome(char *n) {
	this -> nome = n;
}

//////////////////////////////////////////////////////////////////////

double dissimilaridade(Pattern& p1, Pattern& p2, Funcao funcao) {
	double d = 0;
	for (int i = 0; i < numeroVariaveis; i++) {
		switch (funcao) {
		case ABS:
			d += fabs(p1.xU[i] - p2.xU[i]);
			break;
		case POW:
			d += sqr(p1.xU[i] - p2.xU[i]);
			break;
		}
	}
	return d;
}
